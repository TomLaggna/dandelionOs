
(:function CompileFiles (Source) -> (Out))
(:function LinkObjects (ObjectFile Library) -> (Binary))

(:composition CompileMulti (SourceFiles Libraries) -> (Binaries) (
    (CompileFiles (
        (:shard Source <- SourceFile)
    ) => (
        (ObjectFiles := Out)
    ))

    (LinkObjects (
        (:shard Objects <- ObjectFiles)
        (Libraries <- Libraries)
    ) => (
        (Binaries := Binary)
    ))
))

(:function CompileOneFile (SourcesBefore) -> (SourcesAfter Out))

(:composition CompileFixpoint (SourceFiles Libraries) -> (Binary) (
    (:loop (
        (:until_empty Sources <- SourceFiles) ; until_empty (until the collection is empty), until_empty_item (until the collection's only item has length zero)
    ) => (
        (CompileOneFile (
            (SourcesBefore <- Sources) ; no sharding modifier: run a single function instance with all the collection's inputs
        ) => (
            (SourcesAfter := SourcesAfter)
            (Out := Out)
        ))
    ) => (
        (:feedback Sources := SourcesAfter) ; replaces Sources at each iteration
        (ObjectFiles := Out)
    ))
    
    (LinkObjects (
        (Objects <- ObjectFiles)
        (Libraries <- Libraries) ; no sharding modifier: broadcast libraries to all funciton calls
    ) => (
        (Binary := Binary)
    ))
))
